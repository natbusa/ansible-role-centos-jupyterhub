---

## Jupyterhub essential yum packages
- name: check if epel repo is available
  yum: name=epel-release state=present update_cache=yes

- name: make sure necessary yum packages are installed
  yum: name={{item}} state=present
  with_items:
    - sudo
    - npm
    - nodejs
    - git

- name: install npm package configurable-http-proxy
  npm: name=configurable-http-proxy global=yes state=present

## PAM auth and SELinux settings
- name: (SELinux) yum packages
  yum: name={{item}} state=latest
  with_items:
    - checkpolicy
    - policycoreutils
    - policycoreutils-python

- name: (PAM) create shadow group
  group: name=shadow state=present

- name: (PAM) assign shadow passwd file to group 'shadow'
  file:
    path: /etc/shadow
    group: shadow
    mode: 0644

- name: (PAM) SELinux settings
  copy: src=sudo_exec_selinux.te dest=/root/sudo_exec_selinux.te
  register: selinux_config

- name: (PAM) SELinux settings
  command: checkmodule -M -m -o /root/sudo_exec_selinux.mod /root/sudo_exec_selinux.te
  when: selinux_config.changed==true

- name: (PAM) SELinux settings
  command: semodule_package -o /root/sudo_exec_selinux.pp -m /root/sudo_exec_selinux.mod
  when: selinux_config.changed==true

- name: (PAM) SELinux settings
  command: semodule -i /root/sudo_exec_selinux.pp
  when: selinux_config.changed==true

## Jupyterhub: non-root user and groups
- name: add jupyter group
  group: name=jupyter state=present

- name: add jupyterhub user, group jupyter
  user: name=jupyterhub state=present groups=jupyter

- name: (PAM) add jupyterhub to shadow
  command: usermod -aG shadow jupyterhub

- name: (docker) create a docker group
  group: name=docker state=present

- name: (docker) add jupyterhub to docker
  command: usermod -aG docker jupyterhub

- name: (docker) make sure that the daemon is running
  service: name=docker state=started
  when: jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'

# get the images
- name: create alias for jupyterhub_spawner_docker_image
  set_fact:
      docker_images: "{{ jupyterhub_spawner_docker_image }}"
  when:
    - jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'
    - jupyterhub_spawner_docker_image.0 is defined

- name: create alias for jupyterhub_spawner_docker_image
  set_fact:
      docker_images: [ '{{ jupyterhub_spawner_docker_image }}' ]
  when:
    - jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'
    - jupyterhub_spawner_docker_image is string

- name: (docker) pull the images
  command: docker pull {{item}}
  with_items: "{{docker_images}}"
  when: jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'

- name: create jupyterhub folder in etc
  file: path=/etc/jupyterhub state=directory mode=0755 owner=jupyterhub group=jupyter

- name: copy jupyterhub sudospawner sudo config
  template:
    src: sudo_jupyter.j2
    dest: /etc/sudoers.d/jupyter
    mode: 0440
    owner: root
    group: root
  when: jupyterhub_spawner == 'sudospawner' or jupyterhub_spawner == 'sudospawner-lab'

# jupyterhub: python packahes and config
- name: copy requirements file for jupyterhub
  copy: src=requirements.txt dest=/root/jupyterhub_requirements.txt

- name: install jupyter packages via pip3
  pip:
    executable: "{{ python_path }}/pip3"
    requirements: "/root/jupyterhub_requirements.txt"
    extra_args: '--upgrade'

- name: install jupyterlab
  pip:
    executable: "{{ python_path }}/pip3"
    name: jupyterlab
  when: jupyterhub_spawner == 'sudospawner-lab'

- name: register jupyterlab
  command: "{{ python_path }}/jupyter serverextension enable --py jupyterlab --sys-prefix"
  when: jupyterhub_spawner == 'sudospawner-lab'

- name: Check to see if config file exists
  stat: path=/etc/jupyterhub/jupyterhub_config.py
  register: config_exists

- name: configure jupyterhub
  command: "{{ python_path }}/jupyterhub --generate-config chdir=/etc/jupyterhub/ creates=/etc/jupyterhub/jupyterhub_config.py"
  when: config_exists.stat.exists == False

# jupyterhub config: python imports
- name: jupyterhub config - python imports
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="import os"

# jupyterhub config: PAM policies
- name: jupyterhub config - (PAM) set sessions policy
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.PAMAuthenticator.open_sessions = False"

- name: jupyterhub config - (PAM) set auth service
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.PAMAuthenticator.service = 'login'"

# jupyterhub config:: ip addresses

- name: determine IP address for services
  set_fact:
    jupyterhub_ip_guts: '{{ jupyterhub_ip or ansible_eth0.ipv4.address }}'

- debug:
    var: jupyterhub_ip_guts
    verbosity: 1

- name: jupyterhub config - set IP address
  lineinfile:
    dest: /etc/jupyterhub/jupyterhub_config.py
    line: "c.JupyterHub.hub_ip = '{{jupyterhub_ip_guts}}'"
    regexp: '^c.JupyterHub.hub_ip ='

- name: jupyterhub config - set IP address
  lineinfile:
    dest: /etc/jupyterhub/jupyterhub_config.py
    line: "c.JupyterHub.ip = '{{jupyterhub_ip_guts}}'"
    regexp: '^c.JupyterHub.ip ='

- name: jupyterhub config - set IP address
  lineinfile:
    dest: /etc/jupyterhub/jupyterhub_config.py
    line: "c.JupyterHub.proxy_api_ip = '{{jupyterhub_ip_guts}}'"
    regexp: '^c.JupyterHub.proxy_api_ip ='

# jupyterhub config:: port number

- name: jupyterhub config - set proxy port
  lineinfile:
    dest: /etc/jupyterhub/jupyterhub_config.py
    line: 'c.JupyterHub.port = {{ jupyterhub_port }}'
    regexp: '^c.JupyterHub.port ='

# config: select spawner
- name: jupyterhub config - set sudo spawner
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.JupyterHub.spawner_class = 'sudospawner.SudoSpawner'"
  when: jupyterhub_spawner == 'sudospawner' or jupyterhub_spawner == 'sudospawner-lab'

# config: spawner general settings - disable user config
- name: jupyterhub config - set notebook dir
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.Spawner.disable_user_config = True"
  when: jupyterhub_spawner == 'sudospawner' or jupyterhub_spawner == 'sudospawner-lab'

# config: select dockerspawner
- name: jupyterhub config - use the system spawner
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.JupyterHub.spawner_class = 'dockerspawner.SystemUserSpawner'"
  when: jupyterhub_spawner == 'dockerspawner'

# config: select imagespawner
- name: copy requirements file for jupyterhub
  copy: src=imagespawner.py dest=/etc/jupyterhub mode=0640 owner=jupyterhub group=jupyter
  when: jupyterhub_spawner == 'imagespawner'

- name: jupyterhub config - use the system spawner
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="from imagespawner import DockerImageChooserSpawner"
  when: jupyterhub_spawner == 'imagespawner'

- name: jupyterhub config - use the system spawner
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.JupyterHub.spawner_class = DockerImageChooserSpawner"
  when: jupyterhub_spawner == 'imagespawner'

# config: spawner general settings - notebook_dir
- name: jupyterhub config - set notebook dir
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.Spawner.notebook_dir = '~'"

# config: sudo spawner - disable user config
- name: jupyterhub config - set notebook dir
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.Spawner.disable_user_config = True"
  when: jupyterhub_spawner == 'sudospawner' or jupyterhub_spawner == 'sudospawner-lab'

# config: sudo spawner - spawner lab
- name: jupyterhub config - configure jupyterlab
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.Spawner.default_url = '/lab'"
  when: jupyterhub_spawner == 'sudospawner-lab'

# config: docker spawner
- name: jupyterhub config - docker spawner -set container ip
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.DockerSpawner.container_ip = "0.0.0.0""
  when: jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'

- name: jupyterhub config - docker spawner - set volume mapping
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.DockerSpawner.volumes = { '/home/{username}':'/home/{username}' }"
  when: jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'

- name: jupyterhub config - docker spawner - set remove containers
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.DockerSpawner.remove_containers = True"
  when: jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'

# spawner: docker starts lab or notebook by default
# Spawn containers from
#   - env var DOCKER_NOTEBOOK_IMAGE when starting the service (at run time)
#   - the provided jupyterhub_spawner_docker_image (at provisioning time)

- name: jupyterhub config - docker spawner - set image
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.DockerSpawner.container_image = os.environ.get('DOCKER_NOTEBOOK_IMAGE','{{docker_images[0]}}')"
  when: jupyterhub_spawner == 'dockerspawner'

- name: jupyterhub config - docker spawner - set image
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.DockerImageChooserSpawner.dockerimages = {{docker_images}}"
  when: jupyterhub_spawner == 'imagespawner'

# config: docker spawner: map the volumes with the host volumes
- name: jupyterhub config - docker spawner - set host home dir
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.SystemUserSpawner.host_homedir_format_string = '/home/{username}'"
  when: jupyterhub_spawner == 'dockerspawner' or jupyterhub_spawner == 'imagespawner'

## SSL certificates
- name: Check to see if certificate exists
  stat: path=/etc/jupyterhub/server.key
  register: cert_exists

- name: create self-signed SSL cert
  command: openssl req -new -nodes -x509 -subj "/C={{ssl_country}}/ST={{ssl_state}}/L={{ssl_city}}/O={{ssl_org}}/CN=${ansible_fqdn}" -days 3650 -keyout /etc/jupyterhub/server.key -out /etc/jupyterhub/server.crt -extensions v3_ca creates=/etc/jupyterhub/server.crt
  when:
    - nossl == False
    - cert_exists.stat.exists == False

- name: set jupyterhub certificate
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.JupyterHub.ssl_cert = '/etc/jupyterhub/server.crt'"
  when: nossl == False

- name: set jupyterhub certificate
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.JupyterHub.ssl_key = '/etc/jupyterhub/server.key'"
  when: nossl == False

- name: remove ssl setting
  lineinfile: dest=/etc/jupyterhub/jupyterhub_config.py line="c.JupyterHub.confirm_no_ssl = True"
  when: nossl == True

# add test users
- name: add test users
  user: name={{item}} groups=jupyter append=yes state=present password={{gen_test_userpass}}
  with_items: "{{gen_test_username}}"
  when: generate_testusers == True

# add data science directory (not required for actual users)
- name: add lab directory
  file: path=/home/{{item}}/lab state=directory mode=0755 owner={{item}} group=jupyter
  with_items: "{{gen_test_username}}"
  when:
    - generate_testusers == True

# starting the service
- name: install jupyterhub init script
  template:
    src: jupyterhub.service.j2
    dest: /lib/systemd/system/jupyterhub.service
    owner: root
    group: root
    mode: 0644

- name: start jupyterhub
  service: name=jupyterhub enabled=yes state=started
